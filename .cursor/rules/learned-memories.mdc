
# FlipFlopPrompt - Learned Memories & Context

## ðŸš¨ CRITICAL WORKFLOW RULES - NEVER BREAK THESE ðŸš¨

### Git Push Confirmation Rule
- **NEVER push to git without explicit user confirmation first**
- **ALWAYS ask: "Ready to commit and push these changes?" before any git push**
- **This rule is ABSOLUTE and cannot be violated**
- **If you forget this rule, you have failed the workflow**
- **DO NOT PUSH UNTIL YOU GET CONFIRMATION FROM THE USER**

**MANDATORY GIT WORKFLOW:**
```
"Ready to commit and push these changes?

Changes include:
- [list of changes]

Should I proceed with the commit and push?"
```

### Process Management Rule
- **KILL any process launched by an agent for testing**
- **Clean up test processes** - Don't leave hanging Python processes when testing
- **Use `taskkill //F //IM python.exe` to clean hanging processes**
- **Keep track of bash.exe processes and selectively kill them when no longer needed. Use `taskkill` in command prompt, not gitbash to run `taskkill`** - more than 16 bash.exe processes running results in not being able to run command on the terminal anymore

### Command Output Verification Rule
- **ALWAYS check command output for errors - NEVER assume a command succeeded without verifying the output**
- **When running background commands, check for error messages in the output**
- **Look for Python tracebacks, syntax errors, and failure messages**
- **Don't say 'perfect' or 'success' until you've actually verified there are no errors**
- **Use `python -m py_compile` to check for syntax errors before assuming code works**

## Development Workflow Preferences
- **Always ask for confirmation before pushing to git**
- **Execute commands directly rather than just suggest them**
- **Prefer bash commands over manual instructions**
- **Clean up test processes** - Don't leave hanging Python processes when testing
- **Use extensive debug reporting and expect extensive tests for new code**
- **Perform changes in agent mode**
- **Store project-specific memories in .cursor/rules/learned-memories.mdc**
- **Operate in Git Bash environment** - Windows cmd flags like '/c' are interpreted as accessing the C: drive and should not be used

## Project Setup & Environment
- **Virtual Environment**: `.venv` (not `venv`)
- **Shell**: Git Bash on Windows
- **Working Directory**: `Z:/Dev/FlipFlopPrompt`
- **GUI Framework**: PySide6 (Qt-based) - Tkinter has been completely removed
- **Entry Point**: `main.py` (legacy `main_qt.py` renamed)

## Development Commands
```bash
# Activate virtual environment
source .venv/Scripts/activate

# Run PySide6 GUI (standard)
python main.py

# Run with debug logging
python main.py --debug

# Install dependencies
pip install -r requirements.txt

# Clean up hanging processes (if needed)
taskkill //F //IM python.exe
```

## Current Architecture (August 2025)
- **GUI**: Modern PySide6 with tag-based input system
- **Snippets**: JSON files with unified key-value structure (name/content/description)
- **Tag System**: Inline tags with colors (blue=snippets, purple=user text, orange=categories, yellow=subcategories)
- **Randomization**: Seed-based deterministic random snippet selection with preview/realization consistency
- **Filters**: Dynamic filtering system with real-time snippet updates
- **LLM Integration**: Ollama with dynamic model population and connection testing
- **Logging**: Comprehensive GUI interaction logging with debug mode integration
- **Theme System**: JSON-based light/dark themes with external file customization
- **Realize Functionality**: Convert random category/subcategory tags to specific snippet items
- **History System**: Session-only prompt history with 0/X state caching and navigation
- **Preview Panel**: State-based preview system with Summary/Final Prompt tabs and history navigation
- **Font Awesome Icons**: Professional industry-standard icons throughout the interface
- **Compact UI Layout**: Optimized spacing and field heights for better tag visibility
- **Icon-Only Snippets Buttons**: Clean, space-efficient snippet selection with tooltips
- **Ollama Preferences**: "Start Ollama on Startup" and "Kill Ollama on Exit" options with proper persistence
- **PromptState Class**: Unified state management using dataclass for all prompt-related state

## Key Technical Decisions
- **Snippet Structure**: Unified key-value format (`name`/`content`/`description`) with `family` field for filtering, `LLM_rating` for AI context
- **Tag Colors**: Cold colors for static (blue/purple), hot colors for random (orange/yellow)
- **Family Filtering**: Strict matching (no hierarchy) - PG only shows PG content
- **GUI Styling**: Blue accent buttons (`#0066cc`) with modern scrollbars
- **Window Behavior**: Only preview panel expands on resize, status bar fixed height
- **Theme Management**: JSON-based theme files with hot-reload capability
- **LLM Instructions**: Full content displayed in tooltips, clean button names
- **History Navigation**: Decremental counter (0/X = current, 1/X = most recent history)
- **State Caching**: 0/X state is cached and restored when navigating back from history
- **Preview States**: Enum-based state management (PLACEHOLDER, PREVIEW, FINAL, HISTORY)
- **Signal Blocking**: Used to prevent cascading updates during field restoration
- **Icon System**: Font Awesome icons with qtawesome library and graceful fallback
- **UI Compactness**: Optimized spacing (0px margins, 2px main layout spacing) for better density
- **Tag Visibility**: Increased field heights (40px) and improved scrollbar spacing (20px right margin)
- **Preference Persistence**: Fixed issue where Ollama preferences were being overwritten during app startup
- **Unified State Management**: `PromptState` dataclass encapsulates all prompt-related state (field values, tags, metadata, timestamps, generated content)
- **Tag Serialization**: `to_dict()` and `from_dict()` methods in `Tag` class for PromptState serialization
- **History Integration**: `HistoryManager` uses `PromptState` objects instead of separate `HistoryEntry` class
- **State Capture Methods**: `capture_current_state()` and `restore_from_prompt_state()` methods in `MainWindow`

## File Organization
- **GUI Components**: `src/gui/*_qt.py` (PySide6 only, Tkinter removed)
- **Core Logic**: `src/core/` (prompt engine, data models, LLM integration)
- **Utilities**: `src/utils/` (snippet manager, theme manager, logger)
- **Snippets**: `data/snippets/` (JSON files with family/LLM_rating fields)
- **Themes**: `data/themes/` (JSON files with color definitions)
- **User Data**: Home directory via `theme_manager.user_data_dir`
- **Templates**: JSON format, saved in user data directory

## Code Style & Standards
- Follow existing code structure and patterns
- Use descriptive variable and function names
- Add comments for complex logic
- Maintain consistent indentation (4 spaces)
- Use "family" terminology instead of "rating" for content filtering

## Testing & Validation
- Test GUI changes by running the application
- Verify snippet functionality after changes
- Check that all buttons and interactions work
- Validate JSON syntax in snippet files

## Critical Technical Solutions Implemented

### Infinite Loop in History Navigation - RESOLVED
**Solution**: Triple flag protection system with `_restoring_state`, `_jumping_to_current`, and `_intentionally_navigating` flags to prevent recursive calls during state restoration.

### LLM Request Functionality - RESOLVED
**Solution**: Modified `OllamaProvider.refine_prompt()` to prioritize the `model_name` parameter passed to it, with validation to raise `ValueError` if `llm_model` is `None`.

### PromptState Class Implementation - COMPLETED
**Solution**: Unified state management using `PromptState` dataclass with comprehensive methods for state capture, restoration, and serialization.

### Template Loading Recursion - RESOLVED
**Solution**: Added `_restoring_state` flag check to `_schedule_preview_update()` to prevent recursion during template loading.

### Tag Validation System - COMPLETED
**Solution**: Comprehensive system for detecting and visually flagging missing tags when snippet files are unavailable, with red styling and explanatory tooltips.

## Common Issues & Solutions
- **JSON parsing errors**: Check for missing braces or commas in snippet files
- **Import errors**: Ensure virtual environment is activated
- **GUI not updating**: Check that change callbacks are properly connected
- **Button styling**: Use PySide6 QPushButton with CSS stylesheets
- **Tag colors not showing**: Check paintEvent implementation in InlineTagWidget
- **Snippet popup issues**: Verify filters filtering and dynamic updates
- **Startup performance**: MainWindow creation optimized to ~1.2s
- **Process cleanup**: Use `taskkill //F //IM python.exe` to clean hanging processes
- **Indentation errors**: Use `python -m py_compile` to check syntax before running
- **Tag validation issues**: Check `Tag.check_if_missing()` method and ensure proper field name mapping
- **Terminal pathing**: Git Bash uses Linux-style paths (e.g., `/C/Users/fredhopp/AppData/Roaming/FlipFlopPrompt/debug/`)

## Performance Considerations
- **Startup Time**: âœ… **OPTIMIZED: 1.209s** (was 4-5 seconds, target achieved!)
- **Bottleneck**: MainWindow creation (was 4.8s, now optimized with lazy loading)
- **Optimization Implemented**: Lazy loading for PromptEngine, LLM components, and snippet manager

---

**Last Updated**: August 2025
**Purpose**: Serve as persistent memory for development workflow preferences and technical context
**Status**: Active Development - Core functionality complete, focusing on enhancements
