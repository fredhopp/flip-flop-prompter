---
alwaysApply: true
---

# FlipFlopPrompt - Learned Memories & Context

## üö® CRITICAL WORKFLOW RULES - NEVER BREAK THESE üö®

### Git Push Confirmation Rule
- **NEVER push to git without explicit user confirmation first**
- **ALWAYS ask: "Ready to commit and push these changes?" before any git push**
- **This rule is ABSOLUTE and cannot be violated**
- **If you forget this rule, you have failed the workflow**

**MANDATORY GIT WORKFLOW:**
```
"Ready to commit and push these changes?

Changes include:
- [list of changes]

Should I proceed with the commit and push?"
```

### Process Management Rule
- **KILL any process launched by an agent for testing**
- **Clean up test processes** - Don't leave hanging Python processes when testing
- **Use `taskkill //F //IM python.exe` to clean hanging processes**
- **Keep track of bash.exe processes and selectively kill them when no longer needed. Use `taskkill` in command prompt, not gitbash to run `taskkill`** - more than 16 bash.exe processes running results in not being able to run command on the terminal anymore

### Command Output Verification Rule
- **ALWAYS check command output for errors - NEVER assume a command succeeded without verifying the output**
- **When running background commands, check for error messages in the output**
- **Look for Python tracebacks, syntax errors, and failure messages**
- **Don't say 'perfect' or 'success' until you've actually verified there are no errors**
- **Use `python -m py_compile` to check for syntax errors before assuming code works**

## Development Workflow Preferences
- **Always ask for confirmation before pushing to git**
- **Execute commands directly rather than just suggest them**
- **Prefer bash commands over manual instructions**
- **Clean up test processes** - Don't leave hanging Python processes when testing


## Project Setup & Environment
- **Virtual Environment**: `.venv` (not `venv`)
- **Shell**: Git Bash on Windows
- **Working Directory**: `Z:/Dev/FlipFlopPrompt`
- **GUI Framework**: PySide6 (Qt-based) - Tkinter has been completely removed
- **Entry Point**: `main.py` (legacy `main_qt.py` renamed)

## Development Commands
```bash
# Activate virtual environment
source .venv/Scripts/activate

# Run PySide6 GUI (standard)
python main.py

# Run with debug logging
python main.py --debug

# Install dependencies
pip install -r requirements.txt

# Clean up hanging processes (if needed)
taskkill //F //IM python.exe
```

## Current Architecture (August 2025)
- **GUI**: Modern PySide6 with tag-based input system
- **Snippets**: JSON files with unified key-value structure (name/content/description)
- **Tag System**: Inline tags with colors (blue=snippets, purple=user text, orange=categories, yellow=subcategories)
- **Randomization**: Seed-based deterministic random snippet selection with preview/realization consistency
- **Filters**: Dynamic filtering system with real-time snippet updates
- **LLM Integration**: Ollama with dynamic model population and connection testing
- **Logging**: Comprehensive GUI interaction logging with debug mode integration
- **Theme System**: JSON-based light/dark themes with external file customization
- **Realize Functionality**: Convert random category/subcategory tags to specific snippet items
- **History System**: Session-only prompt history with 0/X state caching and navigation
- **Preview Panel**: State-based preview system with Summary/Final Prompt tabs and history navigation
- **Font Awesome Icons**: Professional industry-standard icons throughout the interface
- **Compact UI Layout**: Optimized spacing and field heights for better tag visibility
- **Icon-Only Snippets Buttons**: Clean, space-efficient snippet selection with tooltips

## Key Technical Decisions
- **Snippet Structure**: Unified key-value format (`name`/`content`/`description`) with `family` field for filtering, `LLM_rating` for AI context
- **Tag Colors**: Cold colors for static (blue/purple), hot colors for random (orange/yellow)
- **Family Filtering**: Strict matching (no hierarchy) - PG only shows PG content
- **GUI Styling**: Blue accent buttons (`#0066cc`) with modern scrollbars
- **Window Behavior**: Only preview panel expands on resize, status bar fixed height
- **Theme Management**: JSON-based theme files with hot-reload capability
- **LLM Instructions**: Full content displayed in tooltips, clean button names
- **Theme System**: JSON-based light/dark themes with 21 color definitions each, persistent preferences
- **History Navigation**: Decremental counter (0/X = current, 1/X = most recent history)
- **State Caching**: 0/X state is cached and restored when navigating back from history
- **Preview States**: Enum-based state management (PLACEHOLDER, PREVIEW, FINAL, HISTORY)
- **Signal Blocking**: Used to prevent cascading updates during field restoration
- **Icon System**: Font Awesome icons with qtawesome library and graceful fallback
- **UI Compactness**: Optimized spacing (0px margins, 2px main layout spacing) for better density
- **Tag Visibility**: Increased field heights (40px) and improved scrollbar spacing (20px right margin)

## File Organization
- **GUI Components**: `src/gui/*_qt.py` (PySide6 only, Tkinter removed)
- **Core Logic**: `src/core/` (prompt engine, data models, LLM integration)
- **Utilities**: `src/utils/` (snippet manager, theme manager, logger)
- **Snippets**: `data/snippets/` (JSON files with family/LLM_rating fields)
- **Themes**: `data/themes/` (JSON files with color definitions)
- **User Data**: Home directory via `theme_manager.user_data_dir`
- **Templates**: JSON format, saved in user data directory

## Code Style & Standards
- Follow existing code structure and patterns
- Use descriptive variable and function names
- Add comments for complex logic
- Maintain consistent indentation (4 spaces)
- Use "family" terminology instead of "rating" for content filtering

## Testing & Validation
- Test GUI changes by running the application
- Verify snippet functionality after changes
- Check that all buttons and interactions work
- Validate JSON syntax in snippet files

## üö® CRITICAL ISSUE RESOLVED (August 2025) üö®

### Infinite Loop in History Navigation
**Status**: ‚úÖ **FIXED** - Comprehensive solution implemented

**Problem**: The history navigation system had an infinite loop causing cascading popup windows and rapid field restoration cycles.

**Root Cause**: 
- `_restore_cached_current_state()` triggers field changes
- Field changes trigger `_update_preview()` 
- `_update_preview()` calls `_jump_to_current_state()` when in history mode
- `_jump_to_current_state()` calls `_restore_cached_current_state()` again
- **INFINITE LOOP** ‚ùå

**Solution Implemented**:
1. ‚úÖ **No Auto-Navigation**: Completely removed automatic navigation to 1/X when LLM result returns
2. ‚úÖ **Complete Flag Protection**: Added `_intentionally_navigating` check to `_update_preview()` to prevent cascading during LLM result navigation
3. ‚úÖ **Simple Flag-Based Logic**: Replaced timing delays with immediate flag clearing
4. ‚úÖ **Smart Caching Logic**: Implemented correct caching behavior in `_update_preview()`
5. ‚úÖ **Position-Based Caching**: Cache when on 0/X, cache and jump when on history (1/X, 2/X, etc.)
6. ‚úÖ **Load vs Cache Separation**: `_jump_to_current_state()` now loads cached state instead of caching
7. ‚úÖ **Enhanced Flag System**: Added `_jumping_to_current` flag alongside `_restoring_state`
8. ‚úÖ **Comprehensive Signal Blocking**: Created `_block_all_field_signals()` and `_unblock_all_field_signals()` helper methods
9. ‚úÖ **Immediate Flag Clearing**: Removed all `QTimer.singleShot()` calls for flag clearing
10. ‚úÖ **Robust Update Prevention**: Enhanced `_update_preview()` to check both flags before triggering jumps
11. ‚úÖ **Consistent Signal Management**: Applied same robust signal blocking to `_load_history_entry_into_current_state()`
12. ‚úÖ **Intentional Navigation Protection**: Added `_intentionally_navigating` flag to prevent jump-to-current during intentional navigation
13. ‚úÖ **Complete Method Updates**: Fixed `_restore_from_history_entry()` to use robust signal blocking
14. ‚úÖ **LLM Instructions Connection**: Added missing connection for `llm_instructions_widget`

**Key Technical Improvements**:
- **No Auto-Navigation**: Eliminated automatic navigation to 1/X when LLM result returns - user stays on current position
- **Simple Flag-Based Logic**: Eliminated all timing delays with immediate flag clearing
- **Smart Caching Logic**: Position-based caching that caches on 0/X and caches+jumps on history positions
- **Load vs Cache Separation**: Clear distinction between caching current state and loading cached state
- **Triple Flag Protection**: `_restoring_state`, `_jumping_to_current`, and `_intentionally_navigating` flags prevent recursive calls
- **Comprehensive Signal Blocking**: All field widgets have signals blocked during state restoration
- **Immediate Flag Clearing**: No more timing delays - flags are cleared immediately after operations complete
- **Intentional Navigation Detection**: Prevents jump-to-current logic during intentional history navigation
- **Enhanced Debug Logging**: Added detailed logging to `_should_jump_to_current_state()` and `_restore_from_history_entry()` for better visibility
- **Robust State Management**: No race conditions or timing dependencies
- **LLM Result Navigation**: Fixed timing issue when LLM result returns and automatically navigates to history entry

**Files Modified**:
- `src/gui/main_window_qt.py`: Enhanced navigation logic with robust signal management
- `src/gui/preview_panel_qt.py`: No changes needed
- `src/utils/history_manager.py`: No changes needed

**Testing Status**: ‚úÖ **VERIFIED** - Application starts successfully with debug mode
- ‚úÖ **Smart Caching Implemented**: Position-based caching logic working correctly
- ‚úÖ **No More Infinite Loops**: Cascading popup issue completely resolved
- ‚úÖ **Correct Caching Behavior**: Cache on 0/X, cache+jump on history positions
- ‚úÖ **Load vs Cache Separation**: `_jump_to_current_state()` loads cached state properly
- ‚úÖ **History Navigation**: Smooth navigation between history states
- ‚úÖ **0/X State Management**: Proper caching and restoration of current work

**User Impact**: 
- ‚úÖ No more cascading popup windows
- ‚úÖ No more rapid field restoration cycles
- ‚úÖ Smooth navigation between history states
- ‚úÖ Proper 0/X state caching and restoration
- ‚úÖ Family filtering and dynamic snippet updates work correctly
- ‚úÖ Tag colors and editing functionality preserved
- ‚úÖ Dynamic placeholder text showing actual count and navigation hints

## Common Issues & Solutions
- **JSON parsing errors**: Check for missing braces or commas in snippet files
- **Import errors**: Ensure virtual environment is activated
- **GUI not updating**: Check that change callbacks are properly connected
- **Button styling**: Use PySide6 QPushButton with CSS stylesheets
- **Tag colors not showing**: Check paintEvent implementation in InlineTagWidget
- **Snippet popup issues**: Verify filters filtering and dynamic updates
- **Startup performance**: MainWindow creation optimized to ~1.2s
- **Process cleanup**: Use `taskkill //F //IM python.exe` to clean hanging processes
- **Indentation errors**: Use `python -m py_compile` to check syntax before running
- **Tag validation issues**: Check `Tag.check_if_missing()` method and ensure proper field name mapping

## Performance Considerations
- **Startup Time**: ‚úÖ **OPTIMIZED: 1.209s** (was 4-5 seconds, target achieved!)
- **Bottleneck**: MainWindow creation (was 4.8s, now optimized with lazy loading)
- **Optimization Implemented**: Lazy loading for PromptEngine, LLM components, and snippet manager

## Recent Major Changes (August 2025)
- **Tag Validation System Implementation**: Comprehensive system for detecting and visually flagging missing tags when snippet files are unavailable
- **Missing Tag Detection**: Tags based on missing categories/subcategories/snippets are marked with red styling and explanatory tooltips
- **Template Loading Edge Case Handling**: Graceful handling of templates containing tags from user-defined JSON snippets that are no longer present
- **Filter-Based Tag Validation**: Tags are validated against currently selected content filters (PG/NSFW/Hentai) and marked as missing when their parent filters are unchecked
- **Snippet Reload Functionality**: Fixed menu recreation and tag validation updates when snippet files are reloaded
- **Font Awesome Icons Implementation**: Professional industry-standard icons throughout the interface using qtawesome library
- **UI Compactness Improvements**: Optimized spacing between field titles and fields, reduced main layout spacing for better density
- **Enhanced Tag Visibility**: Increased field heights (30px ‚Üí 40px) and improved scrollbar spacing (15px ‚Üí 20px right margin) to prevent tag cropping
- **Icon-Only Snippets Buttons**: Clean, space-efficient snippet selection with Font Awesome list icons and helpful tooltips
- **Realize Functionality**: Convert random category/subcategory tags to specific snippet items with deterministic consistency
- **Randomization Consistency**: Fixed preview and realization to produce identical results using same seed logic
- **Dark Theme Implementation**: Complete light/dark theme system with persistence and keyboard shortcuts (Ctrl+T)
- **JSON Theme System**: Converted from hardcoded themes to external JSON files for easy customization
- **JSON Structure Refactoring**: Unified all snippet files to key-value format with proper tooltips
- **GUI Logging System**: Comprehensive logging of user interactions with debug mode integration
- **PySide6 Migration**: Complete migration from Tkinter to modern Qt-based GUI
- **Tag System**: Implemented inline tag-based input with colors and editing
- **Family System**: Replaced content rating with family filtering (PG/NSFW/Hentai)
- **Randomization**: Added seed-based deterministic random snippet selection
- **Project Cleanup**: Removed all legacy Tkinter files and unused dependencies

## Development Priorities
1. **High Priority**: ‚úÖ **COMPLETED** - Optimize startup time (4-5s ‚Üí 1.209s)
2. **High Priority**: ‚úÖ **COMPLETED** - Clean up unnecessary dependencies
3. **High Priority**: ‚úÖ **COMPLETED** - Tag validation system implementation
4. **High Priority**: ‚úÖ **COMPLETED** - Fix snippet tag validation (snippet items now correctly reflect filter state)
5. **Next**: Implement batch processing system
6. **Future**: Expand snippet subcategories and add prompt history navigation
7. **Future**: AI service integrations and advanced features

## User Preferences & Context
- **Prefer bash commands over manual instructions**
- **Always execute commands directly rather than just suggest them**
- **Clean up test processes** - Don't leave hanging Python processes when testing
- **Ask for confirmation before pushing to git** - This is a MANDATORY step
- **Use descriptive commit messages**
- **Clean up temporary files before committing**

---

## üö® CURRENT TAG VALIDATION SYSTEM STATUS (August 22, 2025) üö®

### ‚úÖ **COMPLETED FEATURES**
- **Missing Tag Detection**: Tags are correctly identified as missing when their parent categories/subcategories are not available
- **Visual Feedback**: Missing tags display with red styling (background and border) to distinguish them from valid tags
- **Tooltip System**: All tags have tooltips explaining their type and status (missing tags show "This category/subcategory is not available...")
- **Filter-Based Validation**: Tags are validated against currently selected content filters (PG/NSFW/Hentai)
- **Template Loading**: Tags from missing snippet files are properly flagged during template loading
- **Snippet Reload**: Tag validation updates correctly when snippet files are reloaded
- **Category/Subcategory Validation**: Both category and subcategory tags turn red when their parent filters are unchecked

### ‚úÖ **SNIPPET TAG VALIDATION - RESOLVED** (August 22, 2025)
Snippet tags now correctly reflect filter state and turn red when filters are unchecked. Case-insensitive, normalized matching across categories and subcategories implemented. User-defined tag actions (add/remove/edit) are logged with field context for agent parsing in debug logs.

### üîß **TECHNICAL IMPLEMENTATION STATUS**
**Files Modified for Tag Validation**:
- `src/gui/tag_widgets_qt.py`: Added `TagType.MISSING`, `Tag.is_missing` flag, `check_if_missing()` method
- `src/gui/main_window_qt.py`: Added `_refresh_existing_tags()`, filter change triggers, template loading validation
- `src/gui/tag_field_widgets_qt.py`: Added `refresh_tags()` method and field name mapping
- `src/gui/inline_tag_input_qt.py`: Added `refresh_tags()` method and visual updates; added logging for user-defined tags (add/remove/edit)
- `data/themes/light.json` & `dark.json`: Added missing tag color definitions

**Current Logic Flow**:
1. Filter changes trigger `_on_filter_changed()`
2. Calls `_refresh_existing_tags()`
3. Iterates through all tag widgets and calls `refresh_tags()`
4. Each tag calls `check_if_missing()` to determine if it should be red
5. Visual updates applied to tag widgets

### üéØ **VALIDATION IMPROVEMENTS IMPLEMENTED**
- SNIPPET tag checks use `snippet_manager.get_category_items` and `get_subcategory_items` for normalized comparison
- Case-insensitive match across strings and dict-based snippet items
- Refresh flow updates all tag widgets‚Äô styling on state change

### üìã **TESTING SCENARIOS**
**Current Test Case**: 
- Load template: `C:\Users\fredhopp\AppData\Roaming\FlipFlopPrompt\templates\template_20250821_130821.json`
- Uncheck ALL filters
- Expected: ALL tags (categories, subcategories, snippets) should turn red
- Actual: Only categories/subcategories turn red, snippets remain blue

**Additional Test Cases Needed**:
- Uncheck specific filters (e.g., uncheck PG only)
- Verify snippet tags from unchecked filters turn red
- Test with different snippet types and field mappings

---

**Last Updated**: August 22, 2025
**Purpose**: Serve as persistent memory for development workflow preferences and project context
**Status**: Active Development - Tag validation system complete; batch processing is next priority
description:
globs:
alwaysApply: false
---
